# This is the configuration for Porter
# You must define steps for each action, but the rest is optional
# See https://porter.sh/authoring-bundles for documentation on how to configure your bundle
# Uncomment out the sections below to take full advantage of what Porter can do!

name: aks
version: 0.4.1
description: "A Porter bundle that creates a multiple OS Kubernetes cluster on AKS, with taints applied The storage.aks.enable-nfs action installs NFS for use in the cluster. The storage.aks.enable-azurefiles installs Azure Files support in the cluster."
registry: ghcr.io/squillace/cnab-aks-winlin

# Uncomment out the line below to use a template Dockerfile for your invocation image
dockerfile: Dockerfile.tmpl

mixins:
  - exec
  - kubernetes
  - helm3
  - az:
      extensions:
      - aks-preview    
  - helm3:
      clientVersion: v3.3.4
      repositories:
        # Add the official stable repository
        stable:
          url: "https://charts.helm.sh/stable"

parameters:
  - name: AZURE_RESOURCE_GROUP_UPSERT
    description: "The azure resource group to use or create for the cluster resources."
    type: string
    default: winlin
  - name: CLUSTER_GROUP_REGION
    description: "The azure resource group to use or create for the cluster resources."
    type: string
    default: eastus2
  - name: CLUSTER_DEPLOYMENT_REGION
    description: "The azure resource group to use or create for the cluster resources."
    type: string
    default: eastus2
  - name: CLUSTER_NAME
    description: "The name of the AKS cluster."
    type: string
    default: cnab-cluster
  - name: NODE_COUNT
    description: "The number of nodes in the cluster."
    type: string
    default: 3

credentials:
  - name: AZURE_CLIENT_ID
    description: "The client id for the service principal used to automate the bundle's actions."
    env: AZURE_CLIENT_ID
  - name: TENANT_ID_OR_DNS
    description: "The tenant identity in which the service principal resides."
    env: TENANT_ID_OR_DNS
  - name: AZURE_SP_PASSWORD
    description: "The service principal password that is used to log into Azure inside the bundle."
    env: AZURE_SP_PASSWORD
  - name: WINDOWS_USERNAME
    description: "The username for the Windows nodes. This is typically \"azureuser\", but you can specify valid name."
    env: WINDOWS_USERNAME
  - name: WINDOWS_PASSWORD
    description: "The password for the Windows nodes."
    env: WINDOWS_PASSWORD
  - name: AZURE_SUBSCRIPTION_ID
    description: "The Azure subscription into which to deploy."
    env: AZURE_SUB_ID

customActions:
  storage.aks.enable-nfs:
    description: "Configures the cluster with NFS support and switches default storageclass to \"nfs\"."
    stateless: false
    modifies: true       
  storage.aks.enable-azurefiles:
    description: "Configures the cluster with NFS support and switches default storageclass to \"Azure Files\"."
    stateless: false
    modifies: true   
  aks.add-windows:
    description: "Creates and attaches a VMScaleSet of Windows nodes to the cluster and taints them to prevent accidental Linux scheduling."
    stateless: false
    modifies: true


install:

  - az:
      description: "Logging into Azure..."  
      arguments:
        - login
      suppress-output: true
      flags:
        service-principal:
        username: "'{{bundle.credentials.AZURE_CLIENT_ID}}'"
        password: "'{{bundle.credentials.AZURE_SP_PASSWORD}}'"
        tenant: "'{{bundle.credentials.TENANT_ID_OR_DNS}}'"
        output: table
  - az: 
      description: "Setting the Azure subscription...."
      suppress-output: true
      arguments: 
        - "account" 
        - "set" 
      flags:
        subscription: "{{ bundle.credentials.AZURE_SUBSCRIPTION_ID}}"

  - exec:
      command: bash
      description: "Creating or using the Azure resource group...."
      arguments:
        - ./upsertGroup.sh
        - "{{bundle.parameters.AZURE_RESOURCE_GROUP_UPSERT}}"
        - "{{bundle.parameters.CLUSTER_GROUP_REGION}}"
  
  - az:
      description: "Creating the AKS cluster...."
      suppress-output: true
      arguments: 
        - aks
        - create
      flags: 
        service-principal: "'{{bundle.credentials.AZURE_CLIENT_ID}}'"
        resource-group: "'{{bundle.parameters.AZURE_RESOURCE_GROUP_UPSERT}}'"
        name: "'{{bundle.parameters.CLUSTER_NAME}}'"
        windows-admin-password: "'{{bundle.credentials.WINDOWS_PASSWORD}}'"
        windows-admin-username: "'{{bundle.credentials.WINDOWS_USERNAME}}'"
        location: "'{{bundle.parameters.CLUSTER_DEPLOYMENT_REGION}}'"
        generate-ssh-keys: "" # is this good practice any longer?
        node-count: "'{{bundle.parameters.NODE_COUNT}}'"
        node-vm-size: "'Standard_D8_v3'"
        enable-vmss: ""
        nodepool-name: linux
        network-plugin: azure
        kubernetes-version: 1.19.3
        enable-addons: "'monitoring'"
        client-secret: "'{{bundle.credentials.AZURE_SP_PASSWORD}}'" 

aks.add-windows:
  - az:
      description: "Logging into Azure..."  
      arguments:
        - login
      suppress-output: true
      flags:
        service-principal:
        username: "'{{bundle.credentials.AZURE_CLIENT_ID}}'"
        password: "'{{bundle.credentials.AZURE_SP_PASSWORD}}'"
        tenant: "'{{bundle.credentials.TENANT_ID_OR_DNS}}'"
        output: table
  - az: 
      description: "Setting the Azure subscription...."
      suppress-output: true
      arguments: 
        - "account" 
        - "set" 
      flags:
        subscription: "{{ bundle.credentials.AZURE_SUBSCRIPTION_ID}}"
  - az: 
      description: "Acquiring the cluster credentials...."
      arguments:
        - aks
        - get-credentials
      flags:
        resource-group: "'{{bundle.parameters.AZURE_RESOURCE_GROUP_UPSERT}}'"
        name: "'{{bundle.parameters.CLUSTER_NAME}}'"
  - az: 
      description: "Adding the Windows nodes to the cluster..."
      arguments: 
        - aks 
        - nodepool
        - add 
      flags:
        resource-group: "'{{bundle.parameters.AZURE_RESOURCE_GROUP_UPSERT}}'"
        cluster-name: "'{{bundle.parameters.CLUSTER_NAME}}'"
        os-type: Windows
        name: window
        node-count: "'{{bundle.parameters.NODE_COUNT}}'"
        node-vm-size: "'Standard_D8s_v3'"

        
  - exec:
      description: "Adding the taints to the Windows nodes so Linux workloads that don't tolerate Windows nodes are scheduled elsewhere....."
      command: bash
      arguments:
        - "taint-nodes.sh"

storage.aks.enable-nfs:
  - az:
      description: "Logging into Azure..."  
      arguments:
        - login
      suppress-output: true
      flags:
        service-principal:
        username: "'{{bundle.credentials.AZURE_CLIENT_ID}}'"
        password: "'{{bundle.credentials.AZURE_SP_PASSWORD}}'"
        tenant: "'{{bundle.credentials.TENANT_ID_OR_DNS}}'"
        output: table
  - az: 
      description: "Setting the Azure subscription...."
      suppress-output: true
      arguments: 
        - "account" 
        - "set" 
      flags:
        subscription: "{{ bundle.credentials.AZURE_SUBSCRIPTION_ID}}"
  - az: 
      description: "Acquiring the cluster credentials...."
      arguments:
        - aks
        - get-credentials
      flags:
        resource-group: "'{{bundle.parameters.AZURE_RESOURCE_GROUP_UPSERT}}'"
        name: "'{{bundle.parameters.CLUSTER_NAME}}'"

  - helm3: 
      description: "Installing the NFS storage class in the cluster."
      arguments:
        - install
        - nfs
        - stable/nfs-server-provisioner
        - --version
        - 0.3.2
        - --wait
        - --set 
        - persistence-enabled=true

storage.aks.enable-azurefiles:
  - az:
      description: "Logging into Azure..."  
      arguments:
        - login
      suppress-output: true
      flags:
        service-principal:
        username: "'{{bundle.credentials.AZURE_CLIENT_ID}}'"
        password: "'{{bundle.credentials.AZURE_SP_PASSWORD}}'"
        tenant: "'{{bundle.credentials.TENANT_ID_OR_DNS}}'"
        output: table
  - az: 
      description: "Setting the Azure subscription...."
      suppress-output: true
      arguments: 
        - "account" 
        - "set" 
      flags:
        subscription: "{{ bundle.credentials.AZURE_SUBSCRIPTION_ID}}"
  - az: 
      description: "Acquiring the cluster credentials...."
      arguments:
        - aks
        - get-credentials
      flags:
        resource-group: "'{{bundle.parameters.AZURE_RESOURCE_GROUP_UPSERT}}'"
        name: "'{{bundle.parameters.CLUSTER_NAME}}'"
  - exec:
      command: bash
      description: "Not ready to implement https://docs.microsoft.com/en-us/azure/aks/azure-files-volume yet."
      flags:
        c: "'echo TODO -- implement https://docs.microsoft.com/en-us/azure/aks/azure-files-volume.'"
upgrade:
  - exec:
      description: "Not supported. Clusters are cattle, not pets, unless you're in production. And even then, they should be pets."
      command: bash
      flags:
        c: "'echo You can wait quite a while here if you do this.'"

uninstall:
  - az:
      description: "Logging into Azure..."  
      arguments:
        - login
      suppress-output: true
      flags:
        service-principal:
        username: "'{{bundle.credentials.AZURE_CLIENT_ID}}'"
        password: "'{{bundle.credentials.AZURE_SP_PASSWORD}}'"
        tenant: "'{{bundle.credentials.TENANT_ID_OR_DNS}}'"
        output: table
  - az: 
      description: "Setting the Azure subscription...."
      suppress-output: true
      arguments: 
        - "account" 
        - "set" 
      flags:
        subscription: "{{ bundle.credentials.AZURE_SUBSCRIPTION_ID}}"
  - az: 
      description: "Destroying the cluster...."
      arguments:
        - aks
        - delete
      flags:
        resource-group: "'{{bundle.parameters.AZURE_RESOURCE_GROUP_UPSERT}}'"
        name: "'{{bundle.parameters.CLUSTER_NAME}}'"
        yes: ""
        no-wait: ""


# See https://porter.sh/authoring-bundles/#dependencies
#dependencies:
#  mysql:
#    tag: deislabs/porter-mysql:latest
#    parameters:
#      database-name: wordpress

# See https://porter.sh/wiring/#credentials
#credentials:
#  - name: kubeconfig
#    path: /root/.kube/config
